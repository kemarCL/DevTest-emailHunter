

## Questions

### 1. 
Explain your app.

Provide a short description of some the technologies you used and why. And if you made 
any design or engineering decisions please explain those. This doesn't have to be long.
If you used something because you have experience or just like it, write that down. If 
you know why you like it, even better!



### 2. About You

Do you prefer backend or frontend type work? And/or do you have any areas of expertise?
Also what would you like to learn more of? If you're not good in one area, would you 
want to learn more or is there another area you want to focus on?




### 3. Preference

Would you rather battle 100 duck-sized horses or one horse-sized duck?


		Question 1 Answer
************************************* *************************************

My App is quite simple; it takes an email address and passes it to the backend for verification using the emailhunter api.
The response is then stored in a flat file in the same directory, and then an appropriate response is sent back to the user.
The user can then chose to verify another email at anytime.

For the frontend development I used HTML for markup, javascript/AJAX for interactivity and Synchronity between the client and server.
This adds prevents the page from doing a refresh while the verification is being done. when the reponse/result is ready then it will populate the relevant section of the page without a reload.

for the frontend i used PHP for the scripting to send and recieve the email address to verify and result respectively.
I personally like AJAX because of dynamics and PHP because i am familiar with it.


		Question 2 Answer
************************************* *************************************

I have always had a passion and preference for frontend however i am always will to learn and step out of my comfort zone.


		Question 3 Answer
************************************* *************************************
I would prefer to fight 100 duck sized horses. This is like having a huge problem, if you break it down into individual parts then you might be better able to solve 
it in smaller parts to reach a collective or larger solution. 




